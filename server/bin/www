#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('loan-api:server');
var http = require('http');
//socket connection
var socket = require('socket.io');
var messg_model = require('../models/message.model');
var user_model = require('../models/users.model');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app); 

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let userlist = new Map();
//db
const mongoose = require('mongoose');
const path ='mongodb+srv://user799:user799@database.qnbne.mongodb.net/chat-box-db?retryWrites=true&w=majority';


mongoose.connect(path,{
        useNewUrlParser: true,
        useUnifiedTopology:true,
    })

mongoose.connection.on('connected',()=>{
    console.log("mongoose connected")
})
//
//listening on socket io
var io = socket(server);




io.on('connection', (socket) => {
  console.log(socket.handshake.query.username + '--connected');
  let username = socket.handshake.query.username ;
  addUser(username);
  console.log([...userlist.keys()])
  console.log(userlist)
  
  socket.emit("emitted",'connected');
  
  socket.on('message', async(data)=>{        
    console.log("tst",data)
    val = await save_to_db(data);
    console.log("b",val)
    socket.broadcast.emit('broadcast',data);
    socket.emit('id_vl',val)
  })

  
  socket.on('userlist-event' ,()=>{
    socket.emit('userlist',[...userlist.keys()]);
  })
  

  socket.on('disconnect',()=>{
    
    let username = socket.handshake.query.username ;
    removeUser(username);

    
  })
 
});

function addUser(username){
  if(!userlist.has(username)){
    userlist.set(username)
  }
}

function removeUser(username){
  if(userlist.has(username)){
    userlist.delete(username)
  }
}

async function save_to_db(data){
  var id ;
  let msg_dat = new messg_model(data);
  await msg_dat.save()
      .then((res)=>{
          //console.log(res)
          //console.log(res._id)
          id = res._id
          
         
          
      })
      console.log(id)
      return id 
      
  //console.log("D",id)
 // return id

}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
